--[[
 
\ \   / /____  _( _ ) / |
 \ \ / / _ \ \/ / _ \ | |
  \ V /  __/>  < (_) || |
   \_/ \___/_/\_\___(_)_|
	Project: Vex8 - Universal Anti-Death & Player Management
	Author: StrikeXRR
	Version: 8.1
	Description:
	- A modular system for handling player death behavior.
--]]

--//========================= SERVICES =========================\--
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

--//===================== CONFIGURATION ======================\--
-- Configuration values for customizing script behavior.
-- All values can be modified at runtime.

local Config = {
	-- Toggles debug logging for development and troubleshooting.
	DebugMode = false,
	-- The message displayed to players who are kicked upon death.
	KickMessage = "You died! Rejoin to try again.",

	-- Players in this table will NOT be kicked upon death.
	-- Add UserIds.
	Exemptions = {
		[12345678] = true, -- Example UserId
	},
	
	-- Only players on this list can access the admin panel.
	-- Add your own User ID here to access the panel in-game.
	Admins = {
		1234567890, -- Replace with your User ID
		0987654321,
	},
}

--//====================== UTILITY FUNCTIONS ======================\--
-- Helper functions for common operations.

-- Prints a message to the console only if DebugMode is enabled.
local function LogDebug(...)
	if Config.DebugMode then
		print("[Vex8 DEBUG]:", ...)
	end
end

-- Checks if a player is in the exemptions table.
local function IsExempt(player: Player): boolean
	return Config.Exemptions[player.UserId]
end

-- Handles the logic for a player's death.
local function HandlePlayerDeath(player: Player)
	if not IsExempt(player) then
		LogDebug(player.Name, "is not exempt, kicking...")
		player:Kick(Config.KickMessage)
	else
		LogDebug(player.Name, "is exempt, not kicking.")
	end
end

--//====================== REMOTE EVENT SETUP ======================\--
-- Create the RemoteEvent to communicate from the client GUI to the server.
local AdminEvent = Instance.new("RemoteEvent")
AdminEvent.Name = "Vex8AdminEvent"
AdminEvent.Parent = ReplicatedStorage

-- Handle incoming requests from the admin panel.
AdminEvent.OnServerEvent:Connect(function(player, action, targetName, targetId)
	if not table.find(Config.Admins, player.UserId) then
		warn("Vex8: Unauthorized admin access attempt from", player.Name)
		return
	end

	-- Server actions
	if action == "GetExemptions" then
		-- Send the current exemptions list to the requesting client
		AdminEvent:FireClient(player, "UpdateExemptions", Config.Exemptions)
		return
	end

	-- Find the target player by name or ID
	local targetPlayer = Players:GetPlayerByUserId(targetId) or Players:FindFirstChild(targetName)
	if not targetPlayer then
		LogDebug("Target player not found:", targetName or targetId)
		return
	end

	if action == "ToggleExemption" then
		if Config.Exemptions[targetPlayer.UserId] then
			Config.Exemptions[targetPlayer.UserId] = nil
			LogDebug("Removed exemption for", targetPlayer.Name)
		else
			Config.Exemptions[targetPlayer.UserId] = true
			LogDebug("Added exemption for", targetPlayer.Name)
		end
	elseif action == "KickPlayer" then
		targetPlayer:Kick(Config.KickMessage)
		LogDebug("Kicked", targetPlayer.Name)
	elseif action == "ToggleDebug" then
		Config.DebugMode = not Config.DebugMode
		LogDebug("Debug mode is now", tostring(Config.DebugMode))
	end
end)


--//====================== GUI CREATION (CLIENT-SIDE) ======================\--
-- A string containing the entire LocalScript code.
local guiScriptCode = [[
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local AdminEvent = ReplicatedStorage:WaitForChild("Vex8AdminEvent")
local LocalPlayer = Players.LocalPlayer

-- Check if the player is an admin
local function IsAdmin()
	-- The server will handle the actual check, this is just for UI purposes
	local admins = {
		-- This list must match the one in the main script for the GUI to appear
		-- Replace with your admin IDs
		1234567890,
		0987654321,
	}
	return table.find(admins, LocalPlayer.UserId)
end

if not IsAdmin() then
	return
end

-- Wait for the PlayerGui to be ready
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Helper function to create a UI element
local function createUI(instanceType, parent, props, children)
	local instance = Instance.new(instanceType)
	for prop, value in pairs(props) do
		instance[prop] = value
	end
	instance.Parent = parent

	if children then
		for _, child in ipairs(children) do
			createUI(child.type, instance, child.props, child.children)
		end
	end

	return instance
end

-- Function to tween a UI element's transparency and position
local function tweenUI(element, isVisible)
	local tweenInfo = TweenInfo.new(
		0.3,
		Enum.EasingStyle.Sine,
		Enum.EasingDirection.Out
	)
	local targetPosition = isVisible and UDim2.new(0.5, 0, 0.5, 0) or UDim2.new(0.5, 0, 1.5, 0)
	local targetTransparency = isVisible and 0 or 1

	TweenService:Create(element, tweenInfo, {
		BackgroundTransparency = targetTransparency,
		Position = targetPosition
	}):Play()
end

local function updateDebugButton(isDebugging)
	local debugButton = PlayerGui.Vex8AdminGui.MainFrame.ContentFrame.DebugToggle.ToggleDebugButton
	if isDebugging then
		debugButton.Text = "On"
		debugButton.BackgroundColor3 = Color3.fromRGB(80, 200, 120) -- Green
	else
		debugButton.Text = "Off"
		debugButton.BackgroundColor3 = Color3.fromRGB(200, 80, 80) -- Red
	end
end

-- Function to update the displayed lists
local function updateExemptionsList(exemptions)
	local listContainer = PlayerGui.Vex8AdminGui.MainFrame.ContentFrame.ExemptionsFrame.ExemptionsList.ListContainer
	-- Clear the existing list
	for _, child in ipairs(listContainer:GetChildren()) do
		if child:IsA("TextLabel") or child:IsA("UIListLayout") then
			child:Destroy()
		end
	end
	
	createUI("UIListLayout", listContainer, {
		Padding = UDim.new(0, 5),
		SortOrder = Enum.SortOrder.LayoutOrder,
		HorizontalAlignment = Enum.HorizontalAlignment.Center,
		FillDirection = Enum.FillDirection.Vertical
	})

	-- Loop through and add new player names
	for userId, _ in pairs(exemptions) do
		local success, name = pcall(Players.GetNameFromUserIdAsync, Players, userId)
		local displayText = success and name or tostring(userId)

		local playerLabel = createUI("TextLabel", listContainer, {
			Size = UDim2.new(1, -20, 0, 20),
			Text = displayText,
			TextColor3 = Color3.fromRGB(50, 50, 50),
			Font = Enum.Font.SourceSansSemibold,
			TextSize = 14,
			BackgroundTransparency = 1,
			TextXAlignment = Enum.TextXAlignment.Left
		})
	end
end

-- Listen for server events
AdminEvent.OnClientEvent:Connect(function(action, data)
	if action == "UpdateExemptions" then
		updateExemptionsList(data)
	end
end)

-- Create the main ScreenGui
local screenGui = createUI("ScreenGui", PlayerGui, {
	Name = "Vex8AdminGui",
	ResetOnSpawn = false
})

-- Create the main frame
local mainFrame = createUI("Frame", screenGui, {
	Name = "MainFrame",
	AnchorPoint = Vector2.new(0.5, 0.5),
	Size = UDim2.new(0, 500, 0, 600),
	Position = UDim2.new(0.5, 0, 1.5, 0), -- Start off-screen
	BackgroundTransparency = 0.2,
	BackgroundColor3 = Color3.fromRGB(245, 245, 245),
})

-- Add a UICorner for rounded edges
createUI("UICorner", mainFrame, {
	CornerRadius = UDim.new(0, 20)
})

-- Add a UIStroke for a subtle border
createUI("UIStroke", mainFrame, {
	Color = Color3.fromRGB(220, 220, 220),
	Transparency = 0,
	Thickness = 1,
	ApplyStrokeMode = Enum.ApplyStrokeMode.Border
})

-- Top Bar
local topBar = createUI("Frame", mainFrame, {
	Name = "TopBar",
	Size = UDim2.new(1, 0, 0, 60),
	BackgroundTransparency = 1
})

-- Dragging functionality
local dragging
local dragStart
topBar.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
	end
end)

topBar.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = false
	end
end)

RunService.RenderStepped:Connect(function()
	if dragging then
		local delta = game:GetService("UserInputService"):GetMouseLocation() - dragStart
		mainFrame.Position = mainFrame.Position + UDim2.fromOffset(delta.X, delta.Y)
		dragStart = game:GetService("UserInputService"):GetMouseLocation()
	end
end)

-- Title Label
local titleLabel = createUI("TextLabel", topBar, {
	Name = "Title",
	Size = UDim2.new(1, 0, 1, 0),
	Text = "Vex8 Admin Panel",
	TextColor3 = Color3.fromRGB(50, 50, 50),
	Font = Enum.Font.GothamBold,
	TextSize = 20,
	BackgroundTransparency = 1,
	TextXAlignment = Enum.TextXAlignment.Left
})
createUI("UIPadding", titleLabel, {
	PaddingLeft = UDim.new(0, 20)
})

-- Close Button
local closeButton = createUI("TextButton", topBar, {
	Name = "CloseButton",
	Size = UDim2.new(0, 40, 0, 40),
	Position = UDim2.new(1, -50, 0.5, -20),
	Text = "âœ•",
	TextColor3 = Color3.fromRGB(150, 150, 150),
	Font = Enum.Font.SourceSans,
	TextSize = 24,
	BackgroundTransparency = 1
})

closeButton.MouseButton1Click:Connect(function()
	tweenUI(mainFrame, false)
end)

-- Main content frame
local contentFrame = createUI("Frame", mainFrame, {
	Name = "ContentFrame",
	Size = UDim2.new(1, 0, 1, -60),
	Position = UDim2.new(0, 0, 0, 60),
	BackgroundTransparency = 1
})
createUI("UIPadding", contentFrame, {
	PaddingLeft = UDim.new(0, 20),
	PaddingRight = UDim.new(0, 20),
	PaddingTop = UDim.new(0, 10),
	PaddingBottom = UDim.new(0, 10)
})

-- Main layout
createUI("UIListLayout", contentFrame, {
	Padding = UDim.new(0, 20),
	SortOrder = Enum.SortOrder.LayoutOrder,
	HorizontalAlignment = Enum.HorizontalAlignment.Center,
	FillDirection = Enum.FillDirection.Vertical,
	VerticalAlignment = Enum.VerticalAlignment.Top
})

-- Section for Player Management
local playerFrame = createUI("Frame", contentFrame, {
	Name = "PlayerManagement",
	Size = UDim2.new(1, 0, 0, 120),
	BackgroundColor3 = Color3.fromRGB(255, 255, 255),
	LayoutOrder = 1,
	BackgroundTransparency = 0.5
})
createUI("UICorner", playerFrame, { CornerRadius = UDim.new(0, 10) })

local playerLayout = createUI("UIListLayout", playerFrame, {
	Padding = UDim.new(0, 5),
	SortOrder = Enum.SortOrder.LayoutOrder,
	FillDirection = Enum.FillDirection.Vertical,
	HorizontalAlignment = Enum.HorizontalAlignment.Center,
	VerticalAlignment = Enum.VerticalAlignment.Top
})
createUI("UIPadding", playerFrame, {
	PaddingTop = UDim.new(0, 10),
	PaddingBottom = UDim.new(0, 10)
})

createUI("TextLabel", playerFrame, {
	Text = "Player Management",
	TextColor3 = Color3.fromRGB(50, 50, 50),
	Font = Enum.Font.GothamBold,
	TextSize = 16,
	BackgroundTransparency = 1,
	Size = UDim2.new(1, 0, 0, 20)
})

local playerInput = createUI("TextBox", playerFrame, {
	Name = "PlayerInput",
	PlaceholderText = "Enter Player Name or ID",
	Size = UDim2.new(0.95, 0, 0, 35),
	Text = "",
	BackgroundColor3 = Color3.fromRGB(230, 230, 235),
	TextColor3 = Color3.fromRGB(50, 50, 50),
	TextSize = 14,
	Font = Enum.Font.SourceSans,
	BackgroundTransparency = 0.5
})
createUI("UICorner", playerInput, { CornerRadius = UDim.new(0, 8) })

local buttonsLayout = createUI("UIListLayout", playerFrame, {
	Padding = UDim.new(0, 10),
	SortOrder = Enum.SortOrder.LayoutOrder,
	FillDirection = Enum.FillDirection.Horizontal,
	HorizontalAlignment = Enum.HorizontalAlignment.Center,
	VerticalAlignment = Enum.VerticalAlignment.Center
})
buttonsLayout.Parent = playerInput.Parent -- Attach to the same parent

local exemptionButton = createUI("TextButton", playerFrame, {
	Name = "ToggleExemptionButton",
	Text = "Toggle Exemption",
	Size = UDim2.new(0.48, 0, 0, 40),
	BackgroundTransparency = 0,
	BackgroundColor3 = Color3.fromRGB(70, 130, 180),
	TextColor3 = Color3.fromRGB(255, 255, 255),
	Font = Enum.Font.Gotham,
	TextSize = 14
})
createUI("UICorner", exemptionButton, { CornerRadius = UDim.new(0, 10) })
createUI("UIGradient", exemptionButton, {
	Color = ColorSequence.new(Color3.fromRGB(70, 130, 180), Color3.fromRGB(50, 110, 160))
})

local kickButton = createUI("TextButton", playerFrame, {
	Name = "KickButton",
	Text = "Kick Player",
	Size = UDim2.new(0.48, 0, 0, 40),
	BackgroundTransparency = 0,
	BackgroundColor3 = Color3.fromRGB(200, 50, 50),
	TextColor3 = Color3.fromRGB(255, 255, 255),
	Font = Enum.Font.Gotham,
	TextSize = 14
})
createUI("UICorner", kickButton, { CornerRadius = UDim.new(0, 10) })
createUI("UIGradient", kickButton, {
	Color = ColorSequence.new(Color3.fromRGB(200, 50, 50), Color3.fromRGB(180, 40, 40))
})

-- Function to handle button clicks
local function handleButtonClick(action)
	local target = playerInput.Text
	if target:len() > 0 then
		local isUserId = tonumber(target)
		AdminEvent:FireServer(action, target, isUserId and tonumber(target) or nil)
		playerInput.Text = "" -- Clear the input
	end
end

exemptionButton.MouseButton1Click:Connect(function() handleButtonClick("ToggleExemption") end)
kickButton.MouseButton1Click:Connect(function() handleButtonClick("KickPlayer") end)

-- Debug Mode Toggle
local debugFrame = createUI("Frame", contentFrame, {
	Name = "DebugToggle",
	Size = UDim2.new(1, 0, 0, 50),
	BackgroundColor3 = Color3.fromRGB(255, 255, 255),
	LayoutOrder = 2,
	BackgroundTransparency = 0.5
})
createUI("UICorner", debugFrame, { CornerRadius = UDim.new(0, 10) })
local debugLayout = createUI("UIListLayout", debugFrame, {
	Padding = UDim.new(0, 5),
	SortOrder = Enum.SortOrder.LayoutOrder,
	FillDirection = Enum.FillDirection.Horizontal,
	HorizontalAlignment = Enum.HorizontalAlignment.Center,
	VerticalAlignment = Enum.VerticalAlignment.Center
})
createUI("TextLabel", debugFrame, {
	Size = UDim2.new(0.5, 0, 1, 0),
	Text = "Debug Mode:",
	TextColor3 = Color3.fromRGB(50, 50, 50),
	Font = Enum.Font.GothamBold,
	TextSize = 16,
	BackgroundTransparency = 1
})
local debugButton = createUI("TextButton", debugFrame, {
	Name = "ToggleDebugButton",
	Size = UDim2.new(0.4, 0, 0, 35),
	Text = "Toggle",
	BackgroundTransparency = 0,
	BackgroundColor3 = Color3.fromRGB(100, 100, 100),
	TextColor3 = Color3.fromRGB(255, 255, 255),
	Font = Enum.Font.Gotham,
	TextSize = 14
})
createUI("UICorner", debugButton, { CornerRadius = UDim.new(0, 10) })
createUI("UIGradient", debugButton, {
	Color = ColorSequence.new(Color3.fromRGB(100, 100, 100), Color3.fromRGB(70, 70, 70))
})

debugButton.MouseButton1Click:Connect(function()
	AdminEvent:FireServer("ToggleDebug")
end)

-- The button to open the GUI.
local openButton = createUI("TextButton", PlayerGui, {
	Name = "OpenAdminPanelButton",
	Size = UDim2.new(0, 120, 0, 45),
	Position = UDim2.new(1, -130, 0, 10),
	Text = "Admin Panel",
	Font = Enum.Font.GothamBold,
	TextSize = 16,
	TextColor3 = Color3.fromRGB(255, 255, 255),
	BackgroundTransparency = 0.5,
	BackgroundColor3 = Color3.fromRGB(50, 50, 50)
})
createUI("UICorner", openButton, { CornerRadius = UDim.new(0, 10) })

openButton.MouseButton1Click:Connect(function()
	tweenUI(mainFrame, true)
	AdminEvent:FireServer("GetExemptions")
end)

-- Exemptions List Section
local exemptionsFrame = createUI("Frame", contentFrame, {
	Name = "ExemptionsFrame",
	Size = UDim2.new(1, 0, 0.5, 0),
	BackgroundColor3 = Color3.fromRGB(255, 255, 255),
	LayoutOrder = 3,
	BackgroundTransparency = 0.5
})
createUI("UICorner", exemptionsFrame, { CornerRadius = UDim.new(0, 10) })

local exemptionsLayout = createUI("UIListLayout", exemptionsFrame, {
	Padding = UDim.new(0, 5),
	SortOrder = Enum.SortOrder.LayoutOrder,
	FillDirection = Enum.FillDirection.Vertical,
	HorizontalAlignment = Enum.HorizontalAlignment.Center,
	VerticalAlignment = Enum.VerticalAlignment.Top
})
createUI("UIPadding", exemptionsFrame, {
	PaddingTop = UDim.new(0, 10),
	PaddingBottom = UDim.new(0, 10)
})

createUI("TextLabel", exemptionsFrame, {
	Text = "Exempt Players (Auto-Updates)",
	TextColor3 = Color3.fromRGB(50, 50, 50),
	Font = Enum.Font.GothamBold,
	TextSize = 16,
	BackgroundTransparency = 1,
	Size = UDim2.new(1, 0, 0, 20)
})

local exemptionsList = createUI("ScrollingFrame", exemptionsFrame, {
	Name = "ExemptionsList",
	Size = UDim2.new(1, -20, 1, -40),
	Position = UDim2.new(0, 10, 0, 30),
	BackgroundTransparency = 1,
	CanvasSize = UDim2.new(0, 0, 0, 0),
	ScrollBarThickness = 6,
	ScrollBarImageColor3 = Color3.fromRGB(150, 150, 150)
})
createUI("UIPadding", exemptionsList, {
	PaddingTop = UDim.new(0, 5),
	PaddingBottom = UDim.new(0, 5)
})
createUI("UIListLayout", exemptionsList, {
	Padding = UDim.new(0, 5),
	SortOrder = Enum.SortOrder.LayoutOrder,
	HorizontalAlignment = Enum.HorizontalAlignment.Left,
	FillDirection = Enum.FillDirection.Vertical
})

-- Request initial list from server and update list periodically
local function refreshExemptions()
	AdminEvent:FireServer("GetExemptions")
end
refreshExemptions()

task.spawn(function()
	while true do
		refreshExemptions()
		task.wait(5) -- Refresh every 5 seconds
	end
end)
]]

-- Create and parent the LocalScript
local guiScript = Instance.new("LocalScript")
guiScript.Name = "Vex8AdminPanelScript"
guiScript.Source = guiScriptCode
guiScript.Parent = Players.LocalPlayer.PlayerScripts

--//===================== PLAYER MANAGEMENT ======================\--
-- Manages player-related events like character loading and death.

-- Handles events when a player's character is added.
local function OnCharacterAdded(player: Player, character: Model)
	local humanoid = character:WaitForChild("Humanoid", 5)
	if not humanoid then return end

	-- Connect the death handler.
	humanoid.Died:Connect(function()
		HandlePlayerDeath(player)
	end)
end

-- Handles events when a new player joins the game.
local function OnPlayerAdded(player: Player)
	-- Connect to the CharacterAdded event.
	player.CharacterAdded:Connect(function(character)
		OnCharacterAdded(player, character)
	end)

	-- Handle cases where the character already exists on join.
	if player.Character then
		OnCharacterAdded(player, player.Character)
	end
end

--//======================= INITIALIZATION =======================\--
-- The main entry point of the script.

-- Process any players already in the game when the script starts.
for _, player in ipairs(Players:GetPlayers()) do
	OnPlayerAdded(player)
end

-- Connect to the PlayerAdded event to handle new joins.
Players.PlayerAdded:Connect(OnPlayerAdded)

LogDebug("Vex8 script initialized successfully.")
